<refentry id="modload">
<refnamediv>
<refname>Modload</refname>
<refpurpose>return a pointer to a module structure</refpurpose>
</refnamediv>

<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;module.h&gt;
</funcsynopsisinfo>

<funcprototype>
  <funcdef>mod_exec *<function>modlink</function></funcdef>
  <paramdef>char *<parameter>modname</parameter></paramdef>
  <paramdef>int <parameter>type</parameter></paramdef>
  <paramdef>int <parameter>language</parameter></paramdef>
</funcprototype>

<funcprototype>
  <funcdef>mod_exec *<function>modload</function></funcdef>
  <paramdef>char *<parameter>modname</parameter></paramdef>
  <paramdef>int <parameter>type</parameter></paramdef>
  <paramdef>int <parameter>language</parameter></paramdef>
</funcprototype>
</funcsynopsis>

</refsynopsisdiv>

<refsect1><title>Assembler Equivalent</title>
<para>
os9 F$LINK
</para>
<para>
os9 F$LOAD
</para>
</refsect1>

<refsect1><title>Description</title>
<para>
Each of these calls return a pointer to an OS-9 memory module.
</para>
<para>
Modlink will search the module directory for a module with the
same name as "modname" and, if found, increment its link count.
</para>
<para>
Modload will open the file which has the path list specified by
"filename" and loads modules from the file adding them to the
module directory. The returned value is a pointer to the first
module loaded.
</para>
<para>
Above, each is shown as returning a pointer to an executable
module, but it will return a pointer to whatever type of module
is found.
</para>
</refsect1>

<refsect1><title>Diagnostics</title>
<para>
-1 is returned on error.
</para>
</refsect1>

<refsect1><title>See Also</title>
<para>
<link linkend="munlink">munlink()</link>
</para>
</refsect1>

</refentry>
