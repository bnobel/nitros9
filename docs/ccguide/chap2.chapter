<chapter>
<title>Characteristics of Compiled Programs</title>

<section>
<title>The Object Code Module</title>
<para>
The compiler produces position-independent, reentrant 6809 code
in a standard OS-9 memory module format. The format of an executable
program module is shown below. Detailed descriptions of each
section of the module are given on following pages.
</para>
<informalfigure>
<screen>
Module
Offset

                 +-------------------------------+
                 !                               !
                 !         Module Header         !
                 !                               !
                 !-------------------------------!
                 !       Execution Offset        !
                 !-------------------------------!
                 !    Permanent Storage Size     !
                 !-------------------------------!
                 !   Data-text Reference Count   !
                 v                               v
                 :  Data-text Reference Offsets  :
                 ^                               ^
</screen>
</informalfigure>
<section>
<title>Module Header</title>
<para>
This is a standard module header with the type/language byte set to
$11 (Program + 6809 Object Code), and the attribute/revision byte
set to $81 (Reentrant + 1).
</para>
</section>

<section>
<title>Execution Offset</title>
<para>
</para>
</section>

<section>
<title>Storage Size</title>
<para>
</para>
</section>

<section>
<title>Module Name</title>
<para>
</para>
</section>

<section>
<title>Information</title>
<para>
</para>
</section>

<section>
<title>Executable Code</title>
<para>
</para>
</section>

<section>
<title>String Literals</title>
<para>
</para>
</section>

<section>
<title>Initializing Data and its Size</title>
<para>
</para>
</section>

<section>
<title>Data References</title>
<para>
</para>
</section>
</section>

<section>
<title>Memory Management</title>
<para>
The C compiler and its support programs have default conditions
such that the average programmer need not be concerned with details
of memory management. However, there are situations where advanced
programmers may wish to tailor the storage allocation of a program
for special situations. The following information explains in
detail how a C program's data area is allocated and used.
</para>

<section>
<title>Typical C Program Memory Map</title>
<para>
</para>
</section>

<section>
<title>Compile Time Memory Allocation</title>
<para>
</para>
</section>
</section>
</chapter>
